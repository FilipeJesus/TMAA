args <- c("--response", "../results/conc/wgcna/metab_conc_module_res.csv","--peredictor","../data/methyl_data_sig.csv","--reps","5","--p","4")
if( "--response" %in% args ){
response.idx <- grep("--response", args)
response <- args[ response.idx + 1 ]
response <- read.csv(response, header = TRUE)
response <- response[order(response[,1]),]
} else {
stop("please enter the path to the response matrix with prefix '--response'")
}
if( "--predictor" %in% args ){
predictor.idx <- grep("--predictor", args)
predictor <- args[ predictor.idx + 1 ]
predictor <- read.csv(predictor, header = TRUE)
predictor <- predictor[order(predictor[,1]),]
} else {
stop("please enter the path to the predictor matrix with prefix '--predictor'")
}
args
setwd("~/GoogleDrive/Imperial_Masters_Degree/Project 2/Main/scripts")
if( "--response" %in% args ){
response.idx <- grep("--response", args)
response <- args[ response.idx + 1 ]
response <- read.csv(response, header = TRUE)
response <- response[order(response[,1]),]
} else {
stop("please enter the path to the response matrix with prefix '--response'")
}
if( "--predictor" %in% args ){
predictor.idx <- grep("--predictor", args)
predictor <- args[ predictor.idx + 1 ]
predictor <- read.csv(predictor, header = TRUE)
predictor <- predictor[order(predictor[,1]),]
} else {
stop("please enter the path to the predictor matrix with prefix '--predictor'")
}
args <- c("--response", "../results/conc/wgcna/metab_conc_module_res.csv","--predictor","../data/methyl_data_sig.csv","--reps","5","--p","4")
if( "--response" %in% args ){
response.idx <- grep("--response", args)
response <- args[ response.idx + 1 ]
response <- read.csv(response, header = TRUE)
response <- response[order(response[,1]),]
} else {
stop("please enter the path to the response matrix with prefix '--response'")
}
if( "--predictor" %in% args ){
predictor.idx <- grep("--predictor", args)
predictor <- args[ predictor.idx + 1 ]
predictor <- read.csv(predictor, header = TRUE)
predictor <- predictor[order(predictor[,1]),]
} else {
stop("please enter the path to the predictor matrix with prefix '--predictor'")
}
if( "--reps" %in% args ){
reps.idx <- grep("--reps", args)
reps <- args[ reps.idx + 1 ]
reps <- as.numeric(reps)
} else {
stop("please enter the path to the reps variable with prefix '--reps'")
}
l.predictor = ncol(predictor)-1
l.response = ncol(response)-1
predictor.names <- colnames(predictor)[2:ncol(predictor)]
response.names <- colnames(response)[2:ncol(response)]
response <- response[response[,1] %in% predictor[,1],]
predictor <- predictor[predictor[,1] %in% response[,1],]
rownames(response) <- response[,1]
rownames(predictor) <- predictor[,1]
predictor <- predictor[rownames(response),]
i <- 1
response.name = colnames(response)[i+1]
response.name
colnames(response)
response.name = colnames(response)[i+1]
# define fitness function (if not use forech, can be defined outside)
# calculate the gene based association value for gene selection
fitness3 = function(ids){
verbose = F
if(all(ids==FALSE))
return(30)
else{
ids = as.logical(ids)
selpredictor = colnames(predictor[,2:ncol(predictor)])[ids]
predictorIdx = which(colnames(predictor)%in%selpredictor)
#ix = as.logical(ids)
return(gene.assoc(as.matrix(predictor[,(predictorIdx)]),response[,(i+1)]))
}
}
list2 = list()
# population size for the gene selection approach
populationSize = 600
j = 1
rbga.results = genalg3(size=l.predictor,  zeroToOneRatio=5,iters=it, elitism= 30,
evalFunc=fitness3,popSize =populationSize , verbose=F,monitorFunc=monitor) #popsize=300
library("doMC")
library(genalg)
library(flexclust)
source("../functions/gene-based.cca3.2.R")
source("../functions/genealg3.R")
rbga.results = genalg3(size=l.predictor,  zeroToOneRatio=5,iters=it, elitism= 30,
evalFunc=fitness3,popSize =populationSize , verbose=F,monitorFunc=monitor) #popsize=300
it = 3
rbga.results = genalg3(size=l.predictor,  zeroToOneRatio=5,iters=it, elitism= 30,
evalFunc=fitness3,popSize =populationSize , verbose=F,monitorFunc=monitor) #popsize=300
size=l.predictor
zeroToOneRatio=5
iters=it
elitism= 30
evalFunc=fitness3
popSize =populationSize
verbose=F
monitorFunc=monitor
if (is.null(evalFunc)) {
stop("A evaluation function must be provided. See the evalFunc parameter.")
}
vars = size
if (is.na(mutationChance)) {
mutationChance = 1/(vars + 1)
}
mutationChance = NA
if (is.na(mutationChance)) {
mutationChance = 1/(vars + 1)
}
if (is.na(elitism)) {
elitism = floor(popSize/5)
}
if (verbose)
cat("Testing the sanity of parameters...\n")
if (popSize < 5) {
stop("The population size must be at least 5.")
}
if (iters < 1) {
stop("The number of iterations must be at least 1.")
}
if (!(elitism < popSize)) {
stop("The population size must be greater than the elitism.")
}
if (showSettings) {
if (verbose)
cat("The start conditions:\n")
result = list(size = size, suggestions = suggestions,
popSize = popSize, iters = iters, elitism = elitism,
mutationChance = mutationChance)
class(result) = "rbga"
cat(summary(result))
}else {
if (verbose)
cat("Not showing GA settings...\n")
}
showSettings = FALSE
if (showSettings) {
if (verbose)
cat("The start conditions:\n")
result = list(size = size, suggestions = suggestions,
popSize = popSize, iters = iters, elitism = elitism,
mutationChance = mutationChance)
class(result) = "rbga"
cat(summary(result))
}else {
if (verbose)
cat("Not showing GA settings...\n")
}
vars
if (!is.null(suggestions)) {
if (verbose)
cat("Adding suggestions to first population...\n")
population = matrix(nrow = popSize, ncol = vars)
suggestionCount = dim(suggestions)[1]
for (i in 1:suggestionCount) {
population[i, ] = suggestions[i, ]
}
if (verbose)
cat("Filling others with random values in the given domains...\n")
for (child in (suggestionCount + 1):popSize) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
while (sum(population[child, ]) == 0) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
}
}
}
suggestions = NULL
if (!is.null(suggestions)) {
if (verbose)
cat("Adding suggestions to first population...\n")
population = matrix(nrow = popSize, ncol = vars)
suggestionCount = dim(suggestions)[1]
for (i in 1:suggestionCount) {
population[i, ] = suggestions[i, ]
}
if (verbose)
cat("Filling others with random values in the given domains...\n")
for (child in (suggestionCount + 1):popSize) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
while (sum(population[child, ]) == 0) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
}
}
}
!is.null(suggestions)
if (verbose)
cat("Starting with random values in the given domains...\n")
population = matrix(nrow = popSize, ncol = vars)
population
for (child in 1:popSize) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
while (sum(population[child, ]) == 0) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
}
}
population
population[1,]
bestEvals = rep(NA, iters)
meanEvals = rep(NA, iters)
evalVals = rep(NA, popSize)
if (verbose)
cat(paste("Starting iteration", iter, "\n"))
if (verbose)
cat("Calucating evaluation values... ")
1:popSize
ii=1
if (is.na(evalVals[ii])) {
evalFunc(population[ii,]);
}
ids <- population[ii,]
verbose = F
if(all(ids==FALSE))
return(30)
ids==FALSE
all(ids==FALSE)
ids = as.logical(ids)
ids
selpredictor = colnames(predictor[,2:ncol(predictor)])[ids]
selpredictor
predictorIdx = which(colnames(predictor)%in%selpredictor)
predictorIdx
dna <- as.matrix(predictor[,(predictorIdx)])
phen <- response[,(i+1)]
phen
nsnps=max(ncol(dna),1,na.rm=T); ntraits=max(ncol(phen),1,na.rm=T);
nsnps
if (nsnps == 1)
nind = length(dna)
else
if (nsnps == 1)
nind = length(dna)
else
nind=nrow(dna)
nind
all.can = as.numeric(stats::cancor(dna,phen)$cor)
all.acn
all.can
dim(dna)
all.can = as.numeric(stats::cancor(dna,matrix(phen))$cor)
rbga.results = genalg3(size=l.predictor,  zeroToOneRatio=500,iters=it, elitism= 30,
evalFunc=fitness3,popSize =populationSize , verbose=F) #popsize=300
all.can = as.numeric(stats::cancor(dna[,1:30],matrix(phen))$cor)
all.can
zeroToOneRatio=500
population = matrix(nrow = popSize, ncol = vars)
suggestionCount = dim(suggestions)[1]
for (i in 1:suggestionCount) {
population[i, ] = suggestions[i, ]
}
suggestionCount
population = matrix(nrow = popSize, ncol = vars)
zeroToOneRatio
for (child in 1:popSize) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
while (sum(population[child, ]) == 0) {
population[child, ] = sample(c(rep(0, zeroToOneRatio),
1), vars, rep = TRUE)
}
}
population
population[1,]
sum(population[1,])
bestEvals = rep(NA, iters)
meanEvals = rep(NA, iters)
evalVals = rep(NA, popSize)
evalFunc(population[ii,]);
for (iter in 1:iters) {
if (verbose)
cat(paste("Starting iteration", iter, "\n"))
if (verbose)
cat("Calucating evaluation values... ")
tmpVal = foreach(ii = 1:popSize,.combine=c)%do%{
if (is.na(evalVals[ii])) {
evalFunc(population[ii,]);
}
}
#system.time({
#idx = which(is.na(evalVals[1:popSize]))
#evalVals[idx] = sapply(idx,function(x) evalFunc(population[x,]))
#evalVals[idx] = evalFunc(population[idx,])
#})
#system.time(apply(population,1,evalFunc))
idtmp = which(is.na(evalVals))
evalVals[idtmp]=unlist(tmpVal)
bestEvals[iter] = min(evalVals)
meanEvals[iter] = mean(evalVals)
if (verbose)
cat(" done.\n")
if (!is.null(monitorFunc)) {
if (verbose)
cat("Sending current state to rgba.monitor()...\n")
result = list(type = "binary chromosome", size = size,
popSize = popSize, iter = iter, iters = iters,
population = population, elitism = elitism,
mutationChance = mutationChance, evaluations = evalVals,
best = bestEvals, mean = meanEvals)
class(result) = "rbga"
monitorFunc(result)
}
if (iter < iters) {
if (verbose)
cat("Creating next generation...\n")
newPopulation = matrix(nrow = popSize, ncol = vars)
newEvalVals = rep(NA, popSize)
if (verbose)
cat("  sorting results...\n")
sortedEvaluations = sort(evalVals, index = TRUE)
sortedPopulation = matrix(population[sortedEvaluations$ix,
], ncol = vars)
if (elitism > 0) {
if (verbose)
cat("  applying elitism...\n")
newPopulation[1:elitism, ] = sortedPopulation[1:elitism,
]
newEvalVals[1:elitism] = sortedEvaluations$x[1:elitism]
}
if (vars > 1) {
if (verbose)
cat("  applying crossover...\n")
for (child in (elitism + 1):popSize) {
parentProb = dnorm(1:popSize, mean = 0, sd = (popSize/3))
parentIDs = sample(1:popSize, 2, prob = parentProb)
parents = sortedPopulation[parentIDs, ]
crossOverPoint = sample(0:vars, 1)
if (crossOverPoint == 0) {
newPopulation[child, ] = parents[2, ]
newEvalVals[child] = sortedEvaluations$x[parentIDs[2]]
}
else if (crossOverPoint == vars) {
newPopulation[child, ] = parents[1, ]
newEvalVals[child] = sortedEvaluations$x[parentIDs[1]]
}
else {
newPopulation[child, ] = c(parents[1, ][1:crossOverPoint],
parents[2, ][(crossOverPoint + 1):vars])
while (sum(newPopulation[child, ]) == 0) {
newPopulation[child, ] = sample(c(rep(0,
zeroToOneRatio), 1), vars, rep = TRUE)
}
}
}
}
else {
if (verbose)
cat("  cannot crossover (#vars=1), using new randoms...\n")
newPopulation[(elitism + 1):popSize, ] = sortedPopulation[sample(1:popSize,
popSize - elitism), ]
}
population = newPopulation
evalVals = newEvalVals
if (mutationChance > 0) {
if (verbose)
cat("  applying mutations... ")
mutationCount = 0
for (object in (elitism + 1):popSize) {
for (var in 1:vars) {
if (runif(1) < mutationChance) {
population[object, var] = sample(c(rep(0,
zeroToOneRatio), 1), 1)
mutationCount = mutationCount + 1
}
}
}
if (verbose)
cat(paste(mutationCount, "mutations applied\n"))
}
}
}
monitorFunc = NULL
for (iter in 1:iters) {
if (verbose)
cat(paste("Starting iteration", iter, "\n"))
if (verbose)
cat("Calucating evaluation values... ")
tmpVal = foreach(ii = 1:popSize,.combine=c)%do%{
if (is.na(evalVals[ii])) {
evalFunc(population[ii,]);
}
}
#system.time({
#idx = which(is.na(evalVals[1:popSize]))
#evalVals[idx] = sapply(idx,function(x) evalFunc(population[x,]))
#evalVals[idx] = evalFunc(population[idx,])
#})
#system.time(apply(population,1,evalFunc))
idtmp = which(is.na(evalVals))
evalVals[idtmp]=unlist(tmpVal)
bestEvals[iter] = min(evalVals)
meanEvals[iter] = mean(evalVals)
if (verbose)
cat(" done.\n")
if (!is.null(monitorFunc)) {
if (verbose)
cat("Sending current state to rgba.monitor()...\n")
result = list(type = "binary chromosome", size = size,
popSize = popSize, iter = iter, iters = iters,
population = population, elitism = elitism,
mutationChance = mutationChance, evaluations = evalVals,
best = bestEvals, mean = meanEvals)
class(result) = "rbga"
monitorFunc(result)
}
if (iter < iters) {
if (verbose)
cat("Creating next generation...\n")
newPopulation = matrix(nrow = popSize, ncol = vars)
newEvalVals = rep(NA, popSize)
if (verbose)
cat("  sorting results...\n")
sortedEvaluations = sort(evalVals, index = TRUE)
sortedPopulation = matrix(population[sortedEvaluations$ix,
], ncol = vars)
if (elitism > 0) {
if (verbose)
cat("  applying elitism...\n")
newPopulation[1:elitism, ] = sortedPopulation[1:elitism,
]
newEvalVals[1:elitism] = sortedEvaluations$x[1:elitism]
}
if (vars > 1) {
if (verbose)
cat("  applying crossover...\n")
for (child in (elitism + 1):popSize) {
parentProb = dnorm(1:popSize, mean = 0, sd = (popSize/3))
parentIDs = sample(1:popSize, 2, prob = parentProb)
parents = sortedPopulation[parentIDs, ]
crossOverPoint = sample(0:vars, 1)
if (crossOverPoint == 0) {
newPopulation[child, ] = parents[2, ]
newEvalVals[child] = sortedEvaluations$x[parentIDs[2]]
}
else if (crossOverPoint == vars) {
newPopulation[child, ] = parents[1, ]
newEvalVals[child] = sortedEvaluations$x[parentIDs[1]]
}
else {
newPopulation[child, ] = c(parents[1, ][1:crossOverPoint],
parents[2, ][(crossOverPoint + 1):vars])
while (sum(newPopulation[child, ]) == 0) {
newPopulation[child, ] = sample(c(rep(0,
zeroToOneRatio), 1), vars, rep = TRUE)
}
}
}
}
else {
if (verbose)
cat("  cannot crossover (#vars=1), using new randoms...\n")
newPopulation[(elitism + 1):popSize, ] = sortedPopulation[sample(1:popSize,
popSize - elitism), ]
}
population = newPopulation
evalVals = newEvalVals
if (mutationChance > 0) {
if (verbose)
cat("  applying mutations... ")
mutationCount = 0
for (object in (elitism + 1):popSize) {
for (var in 1:vars) {
if (runif(1) < mutationChance) {
population[object, var] = sample(c(rep(0,
zeroToOneRatio), 1), 1)
mutationCount = mutationCount + 1
}
}
}
if (verbose)
cat(paste(mutationCount, "mutations applied\n"))
}
}
}
reps
rbga.results = genalg3(size=l.predictor,  zeroToOneRatio=500,iters=it, elitism= 30,
evalFunc=fitness3,popSize =populationSize , verbose=F) #popsize=300
cat(paste(response.name," ",rbga.results$best[it]))
cat("\n")
list1 = list()
list1[["pvalue"]]= rbga.results$best[it]
list1[["predictorInd"]] = rbga.results$population[which.min(rbga.results$evaluations),]
list1[["predictorNames"]] = colnames(predictor[,as.logical(rbga.results$population[which.min(rbga.results$evaluations),])])
list2[[j]]=list1
list2
